package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.71

import (
	"context"
	"fmt"
	"gin_todo/graph/model"
	"gin_todo/internal/handler/dto/request"
	"strconv"

	"github.com/go-playground/validator/v10"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, data model.Todo) (*model.Error, error) {
	intID, err := strconv.ParseInt(data.ID, 10, 32)
	if err != nil {
		return &model.Error{
			Message: fmt.Sprintf("ID is not a number: %s", data.ID),
		}, fmt.Errorf("ID is not a number: %s", data.ID)
	}
	v := validator.New()
	dto := request.CreateTaskRequest{
		UserID: int32(intID),
		Tasks:  data.Tasks,
	}
	if err := v.Struct(dto); err != nil {
		return &model.Error{
			Message: fmt.Sprintf("Validation error: %s", err.Error()),
		}, fmt.Errorf("Validation error: %s", err.Error())
	}
	err = r.TaskUseCase.CreateTask(dto.UserID, dto.Tasks)
	if err != nil {
		return &model.Error{
			Message: fmt.Sprintf("Create task error: %s", err.Error()),
		}, fmt.Errorf("Create task error: %s", err.Error())
	}
	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
